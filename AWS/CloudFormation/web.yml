---
AWSTemplateFormatVersion: '2010-09-09'
Description: Template for web stack

Mappings:
  # Mappings of AWS instance archs are borrowed from this example template
  # https://s3-us-west-2.amazonaws.com/cloudformation-templates-us-west-2/ElastiCache_Redis.template
  "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.nano"     : { "Arch" : "HVM64"  }
  }
  "AWSRegionArch2AMI" : {
    "us-east-1"        : {"PV64" : "ami-2a69aa47", "HVM64" : "ami-6869aa05", "HVMG2" : "ami-22b68b59"},
    "us-west-2"        : {"PV64" : "ami-7f77b31f", "HVM64" : "ami-7172b611", "HVMG2" : "ami-be4ea3c6"},
    "us-west-1"        : {"PV64" : "ami-a2490dc2", "HVM64" : "ami-31490d51", "HVMG2" : "ami-cfe5cfaf"},
    "eu-west-1"        : {"PV64" : "ami-4cdd453f", "HVM64" : "ami-f9dd458a", "HVMG2" : "ami-aedb26d7"},
    "eu-central-1"     : {"PV64" : "ami-6527cf0a", "HVM64" : "ami-ea26ce85", "HVMG2" : "ami-40b8102f"},
    "ap-northeast-1"   : {"PV64" : "ami-3e42b65f", "HVM64" : "ami-374db956", "HVMG2" : "ami-d95aabbf"},
    "ap-southeast-1"   : {"PV64" : "ami-df9e4cbc", "HVM64" : "ami-a59b49c6", "HVMG2" : "ami-15660276"},
    "ap-southeast-2"   : {"PV64" : "ami-63351d00", "HVM64" : "ami-dc361ebf", "HVMG2" : "ami-0b5a4168"},
    "ap-south-1"       : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-ffbdd790", "HVMG2" : "ami-f4cdb79b"}
  }


Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of public subnet Ids
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of private subnet Ids
  SecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: List of security group Ids
  InstanceType:
    Type: String
    Description: EC2 instance type
    AllowedValues: [t2.micro, t2.nano]
    Default: t2.micro
  ASGInstanceCount:
    Type: Number
    Description: Number of EC2 instances to scale in ASG
  SSHKeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH KeyPair name
  RDSEndpoint:
    Type: String
    Description: RDS instance endpoint to connect
  DBUser:
    NoEcho: true
    Type: String
    Description: DB User for the RDS instance to connect
  DBPassword:
    NoEcho: true
    Type: String
    Description: Password of the DB user for the RDS instance to connect


Resources:

  # 1. Classic ELB
  ClassicELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Description: Classic ELB
    Properties:
      Subnets: !Ref PublicSubnets
      CrossZone: true
      LBCookieSticknessPolicy:
        - PolicyName: CookieBasedPolicy
          CookieExpirationPeriod: 30
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
          PolicyNames: [ CookieBasedPolicy ]
      HealthCheck:
        Target: HTTP:8080/index.php
        HealthyThreshold: 2
        UnhealthyThreshold: 5
        Interval: 10
        Timeout: 5

  # 2. Launch Configuration
  # TODO: Close your eyes!! This needs to be provisioned by some Ansible. Apologies for this
  LaunchConf:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
       Fn::FindInMap:
        - "AWSRegionArch2AMI"
        - Ref: "AWS::Region"
        - Fn::FindInMap:
            - "AWSInstanceType2Arch"
            - Ref: InstanceType
            - "Arch"
      SecurityGroups: !Ref SecurityGroups
      InstanceType: !Ref InstanceType
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - ["#!/bin/bash",
            "yum install -y php php-mysql httpd",
            "cat >> /var/www/html/index.php << EOF",
            " <?php",
            "   $servername = \"", !Ref RDSEndpoint, "\";",
            "   $username = \"", !Ref DBUser, "\";",
            "   $password = \"", !Ref DBPassword, "\";",
            "   $conn = new mysqli($servername, $username, $password);",
            "   if ($conn->connect_error) {",
            "       die(\"Connection failed: \" . $conn->connect_error);",
            "   }",
            "   echo \"Connected successfully\";",
            " ?>",
            " EOF",
            "chmod 664 /var/www/html/index.php",
            "chown apache:apache /var/www/html/index.php"]

  # 3. Auto-Scaling Group
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Description: AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnets
      LaunchConfigurationName: !Ref LaunchConf
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: !Ref ASGInstanceCount
      LoadBalancerNames:
        - !Ref ClassicELB
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M  # 15 minutes
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

#Outputs:

