---
AWSTemplateFormatVersion: '2010-09-09'
Description: Template for web stack

Mappings:
  # Mappings of AWS instance archs are borrowed from this example template
  # https://s3-us-west-2.amazonaws.com/cloudformation-templates-us-west-2/ElastiCache_Redis.template
  "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.nano"     : { "Arch" : "HVM64"  },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "t2.large"    : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   },
      "m1.medium"   : { "Arch" : "PV64"   },
      "m1.large"    : { "Arch" : "PV64"   },
      "m1.xlarge"   : { "Arch" : "PV64"   },
      "m2.xlarge"   : { "Arch" : "PV64"   },
      "m2.2xlarge"  : { "Arch" : "PV64"   },
      "m2.4xlarge"  : { "Arch" : "PV64"   },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.large"    : { "Arch" : "HVM64"  },
      "m4.xlarge"   : { "Arch" : "HVM64"  },
      "m4.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.4xlarge"  : { "Arch" : "HVM64"  },
      "m4.10xlarge" : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "PV64"   }
  }
   "AWSRegionArch2AMI" : {
      "us-east-1"        : {"PV64" : "ami-2a69aa47", "HVM64" : "ami-6869aa05", "HVMG2" : "ami-22b68b59"},
      "us-west-2"        : {"PV64" : "ami-7f77b31f", "HVM64" : "ami-7172b611", "HVMG2" : "ami-be4ea3c6"},
      "us-west-1"        : {"PV64" : "ami-a2490dc2", "HVM64" : "ami-31490d51", "HVMG2" : "ami-cfe5cfaf"},
      "eu-west-1"        : {"PV64" : "ami-4cdd453f", "HVM64" : "ami-f9dd458a", "HVMG2" : "ami-aedb26d7"},
      "eu-west-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-886369ec", "HVMG2" : "NOT_SUPPORTED"},
      "eu-central-1"     : {"PV64" : "ami-6527cf0a", "HVM64" : "ami-ea26ce85", "HVMG2" : "ami-40b8102f"},
      "ap-northeast-1"   : {"PV64" : "ami-3e42b65f", "HVM64" : "ami-374db956", "HVMG2" : "ami-d95aabbf"},
      "ap-northeast-2"   : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-2b408b45", "HVMG2" : "NOT_SUPPORTED"},
      "ap-southeast-1"   : {"PV64" : "ami-df9e4cbc", "HVM64" : "ami-a59b49c6", "HVMG2" : "ami-15660276"},
      "ap-southeast-2"   : {"PV64" : "ami-63351d00", "HVM64" : "ami-dc361ebf", "HVMG2" : "ami-0b5a4168"},
      "ap-south-1"       : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-ffbdd790", "HVMG2" : "ami-f4cdb79b"},
      "us-east-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-f6035893", "HVMG2" : "NOT_SUPPORTED"},
      "ca-central-1"     : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-730ebd17", "HVMG2" : "NOT_SUPPORTED"},
      "sa-east-1"        : {"PV64" : "ami-1ad34676", "HVM64" : "ami-6dd04501", "HVMG2" : "NOT_SUPPORTED"},
      "cn-north-1"       : {"PV64" : "ami-77559f1a", "HVM64" : "ami-8e6aa0e3", "HVMG2" : "NOT_SUPPORTED"}
    }


Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of public subnet Ids for ELB
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of private subnet Ids
  PrivateSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: List of private security group Ids for EC2
  PublicSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: List of public security group Ids for ELB
  InstanceType:
    Type: String
    Description: EC2 instance type
    AllowedValues: ["t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium"]
    Default: t2.micro
  ASGInstanceCount:
    Type: Number
    Description: Number of EC2 instances to scale in ASG
  SSHKeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH KeyPair name
  RDSEndpoint:
    Type: String
    Description: RDS instance endpoint to connect
  DBUser:
    NoEcho: true
    Type: String
    Description: DB User for the RDS instance to connect
  DBPassword:
    NoEcho: true
    Type: String
    Description: Password of the DB user for the RDS instance to connect


Resources:

  # 1. Classic ELB
  ClassicELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Description: Classic ELB
    Properties:
      Subnets: !Ref PublicSubnets  # instead of AZs
      CrossZone: true
      SecurityGroups: !Ref PublicSecurityGroups
      LBCookieStickinessPolicy:
        - PolicyName: CookieBasedPolicy
          CookieExpirationPeriod: 30
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
          PolicyNames: [CookieBasedPolicy]
      HealthCheck:
        Target: HTTP:80/index.php
        HealthyThreshold: 2
        UnhealthyThreshold: 5
        Interval: 10
        Timeout: 5

  # 2. Launch Configuration
  # TODO: Close your eyes!! This needs to be provisioned by some Ansible. Apologies for this
  LaunchConf:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
       Fn::FindInMap:
        - "AWSRegionArch2AMI"
        - Ref: "AWS::Region"
        - Fn::FindInMap:
            - "AWSInstanceType2Arch"
            - Ref: InstanceType
            - "Arch"
      SecurityGroups: !Ref PrivateSecurityGroups
      InstanceType: !Ref InstanceType
      KeyName: !Ref SSHKeyPairName
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              yum install -y php php-mysql httpd
              service httpd start
              cat >> /var/www/html/index.php << EOF
              <?php
              ${KEY_SERVER} = "${DB_SERVER}";
              ${KEY_USER} = "${DB_USER}";
              ${KEY_PASS} = "${DB_PASS}";
              ${KEY_HOST} = gethostname();
              echo "Connected to ${KEY_HOST}";
              echo "    ";
              ${KEY_CONN} = new mysqli(${KEY_SERVER}, ${KEY_USER}, ${KEY_PASS});
              if (${KEY_CONN}->connect_error) {
              die("Connection failed: ".${KEY_CONN}->connect_error);
              }
              echo "Connected successfully";
              ?>
              EOF

              chmod 664 /var/www/html/index.php
              chown apache:apache /var/www/html/index.php
            - { KEY_SERVER: "\\$servername",
                KEY_USER: "\\$username",
                KEY_PASS: "\\$password",
                KEY_HOST: "\\$hostname",
                KEY_CONN: "\\$conn",
                DB_SERVER: !Ref RDSEndpoint,
                DB_USER: !Ref DBUser,
                DB_PASS: !Ref DBPassword }

  # 3. Auto-Scaling Group
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Description: AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnets
      LaunchConfigurationName: !Ref LaunchConf
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: !Ref ASGInstanceCount
      LoadBalancerNames:
        - !Ref ClassicELB

Outputs:
  WebsiteURL:
    Value: !Join ["", ["http://", !GetAtt [ClassicELB, "DNSName"], "/index.php"]]
    Description: Website for the end-user
